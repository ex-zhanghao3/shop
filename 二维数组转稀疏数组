package com.atguigu;

/**
 * 稀疏数组
 * 案例：五子棋棋盘
 */
public class SparseArray {
    public static void main(String[] args) {
        /**
         * 思路：
         * 1先创建一个原始的二维数组 11*11  0表示没有棋子，1表示黑子 2表示蓝子
         * 2将二维数组转成稀疏数组 （步骤：先遍历二维数组，得到非零数据的个数,然后创建稀疏数组）
         * 3
         */
        int chessArr1[][]=new int[11][11];
        chessArr1[1][2]=1;
        chessArr1[2][3]=2;
        //输出原始的二维数组
        for (int[] ints : chessArr1) {
            System.out.println("");
            for (int anInt : ints) {
                System.out.printf("%d\t",anInt);
            }
        }

        int sum=0;
        for (int i = 0; i < chessArr1.length; i++) {
            for (int j = 0; j < chessArr1[i].length; j++) {
                if (chessArr1[i][j]!=0){
                    sum++;
                }
            }
        }

        int sparseArr[][]=new int[sum+1][3];
        //给稀疏数组赋值
        sparseArr[0][0]=11;
        sparseArr[0][1]=11;
        sparseArr[0][2]=sum;
        //遍历二维数组，将非零的值存放到spareArr中
        int count=0;//用于记录是第几个非零数据
        for (int i = 0; i < chessArr1.length; i++) {
            for (int j = 0; j < chessArr1[i].length; j++) {
                if (chessArr1[i][j]!=0){
                    count++;
                    sparseArr[count][0]=i;
                    sparseArr[count][1]=j;
                    sparseArr[count][2]=chessArr1[i][j];
                }
            }
        }
        //输出稀疏数组的形式
        System.out.println();
        System.out.println("得到的稀疏数组~~~~~");
        for (int i = 0; i < sparseArr.length; i++) {

            System.out.printf("%d\t%d\t%d\t\n",sparseArr[i][0],sparseArr[i][1],sparseArr[i][2]);
        }

        /**************************************将稀疏数组回复成原始的二维数组******************************************/
        /**
         * 步骤
         * 1先读取稀疏数组第一行，根据第一行数据，创建原始二维数组，比如上面的chessArr2=int[][]
         * 2再读取稀疏数组后几行的数据，并赋给原始的二维数组即可
         */
        int chessArr2[][]=new int[sparseArr[0][0]][sparseArr[0][1]];
        for (int i = 1; i < sparseArr.length; i++) {
            chessArr2[sparseArr[i][0]][sparseArr[i][1]]=sparseArr[i][2];
        }
        System.out.println("恢复二维数组输出~~~~");
        //输出恢复的二维数组
        for (int[] ints : chessArr2) {
            System.out.println();
            for (int anInt : ints) {
                System.out.printf("%d\t",anInt);
            }
        }

    }
}
